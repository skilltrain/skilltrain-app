# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: serverless
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221 #Not sure what this is, was here by default, Eliot
  region: ap-northeast-1
  stage: dev
  profile: athelian
  environment:
    TABLE_NAME: flutter-chat-tbl
    SERVICE_NAME: ${self:service}
    STAGE_NAME: ${self:provider.stage}
    REGION_NAME: ${self:provider.region}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:*
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:*"
    - Effect: "Allow"
      Action:
        - lambda:*
      Resource: "arn:aws:lambda:${self:provider.region}:*:*"
    - Effect: Allow
      Action:
        #- "execute-api:ManageConnections"
        - "execute-api:*"
      Resource: "arn:aws:execute-api:*:*:**/@connections/*"
  logs:
    websocket: true


# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  # Web sockets handlers
  connectionHandler:
    handler: webSocketHandler.connectionHandler
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect
  defaultHandler:
    handler: webSocketHandler.defaultHandler
    events:
      - websocket: $default
  webSocketMessageHandler:
    handler: webSocketHandler.webSocketMessageHandler
    events:
      - websocket:
          route: chatMessages
# DynamoDB Stream Handler
  chatTableStreamHandler:
    handler: tableStreamHandler.chatTableStreamHandler
    events:
      - stream:
          type: dynamodb
          batchSize: 1
          startingPosition: LATEST
          arn:
            Fn::GetAtt: [flutterChatTable, StreamArn]
# CONNECTED collection CRUD
  createConnected:
    handler: connectedHandler.createConnected
    events:
      - http:
          path: ${self:service}/connected/createConnected
          method: get
  createConnectedUser:
    handler: connectedHandler.createConnectedUser
    events:
      - http:
          path: ${self:service}/connected/createConnectedUser
          method: post
          cors: true
          integration: lambda
          
  getConnected:
    handler: connectedHandler.getConnected
    events:
      - http:
          path: ${self:service}/connected/getConnected
          method: get
          integration: lambda
          
  getConnectedUser:
    handler: connectedHandler.getConnectedUser
    events:
      - http:
          path: ${self:service}/connected/getConnectedUser
          method: get
          integration: lambda
          
  updateConnected:
    handler: connectedHandler.updateConnected
    events:
      - http:
          path: ${self:service}/connected/updateConnected
          method: post
          cors: true
          integration: lambda
          
  # MSG Collection CRUD
  createMessage:
    handler: messageHandler.createMessage
    events:
      - http:
          path: ${self:service}/messages/createMessage
          method: get
  createMessageUser:
    handler: messageHandler.createMessageUser
    events:
      - http:
          path: ${self:service}/messages/createMessageUser
          method: post
          cors: true
          integration: lambda
           
  getMessage:
    handler: messageHandler.getMessage
    events:
      - http:
          path: ${self:service}/messages/getMessage
          method: get
          integration: lambda
          
  updateMessage:
    handler: messageHandler.updateMessage
    events:
      - http:
          path: ${self:service}/messages/updateMessage
          method: post
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

resources:
  Resources:
    flutterChatTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: flutter-chat-tbl
        AttributeDefinitions:
          - AttributeName: collection
            AttributeType: S  
          - AttributeName: subCollection
            AttributeType: S
        KeySchema:
          - AttributeName: collection
            KeyType: HASH   # Partition Key
          - AttributeName: subCollection
            KeyType: RANGE  # Sort key
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 10
        StreamSpecification:
          StreamViewType: NEW_IMAGE